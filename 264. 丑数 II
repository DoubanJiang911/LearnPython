class Solution:
    def nthUglyNumber(self, n: int) -> int:
        dp = [0] * n
        dp[1] = 1
        p2 = p3 = p5 = 1
        for i in range(2, n + 1):
            num2, num3, num5 = dp[p2] * 2, dp[p3] * 3, dp[p5] * 5
            dp[i] = min(num2, num3, num5)
            if dp[i] == num2:
                p2 += 1
            elif dp[i] == num3:
                p3 += 1
            elif dp[i] == num5:
                p5 += 1
            if dp[i] == dp[i - 1]:
                i -= 1
        return dp[n]


'''
官方题解里提到的三个指针p2，p3，p5，但是没有说明其含义，实际上pi的含义是有资格同i相乘的最小丑数的位置。这里资格指的是：如果一个丑数nums[pi]通过乘以i可以得到下一个丑数，那么这个丑数nums[pi]就永远失去了同i相乘的资格（没有必要再乘了），我们把pi++让nums[pi]指向下一个丑数即可。

不懂的话举例说明：

一开始，丑数只有{1}，1可以同2，3，5相乘，取最小的1×2=2添加到丑数序列中。

现在丑数中有{1，2}，在上一步中，1已经同2相乘过了，所以今后没必要再比较1×2了，我们说1失去了同2相乘的资格。

现在1有与3，5相乘的资格，2有与2，3，5相乘的资格，但是2×3和2×5是没必要比较的，因为有比它更小的1可以同3，5相乘，所以我们只需要比较1×3，1×5，2×2。

依此类推，每次我们都分别比较有资格同2，3，5相乘的最小丑数，选择最小的那个作为下一个丑数，假设选择到的这个丑数是同i（i=2，3，5）相乘得到的，所以它失去了同i相乘的资格，把对应的pi++，让pi指向下一个丑数即可。
'''


'''
遍历方案，n = 775 开始超时
class Solution:
    def nthUglyNumber(self, n: int) -> int:
        ans = [1]
        s = 1
        while len(ans) < n:
            s += 1
            if isUgly(self, s):
                ans.append(s)
        return ans[-1]


def isUgly(self, n: int) -> bool:
    if n == 1:
        return True
    elif n <= 0:
        return False
    else:
        flag = 0
        while n > 1 and flag < 3:
            for i in [2, 3, 5]:
                flag += 1
                if n % i == 0:
                    n = n // i
                    flag = 0
                    break
        if flag == 3 or n == 0:
            return False
        else:
            return True

'''
