class Solution:
    def countSquares(self, matrix: List[List[int]]) -> int:
        m = len(matrix)
        n = len(matrix[0])
        dp = [[0 for _ in range(n)] for _ in range(m)]
        le = min(m, n)
        hashtable = [0 for _ in range(le)]  # 备注2
        for i in range(m):
            for j in range(n):
                if matrix[i][j] == 1:
                    if i == 0 or j == 0:
                        dp[i][j] = 1
                        hashtable[1] += 1
                    else:
                        dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1], dp[i][j - 1]) + 1  # 备注1
                        for k in range(0, dp[i][j]):  # 备注3
                            hashtable[k] += 1
        return sum(hashtable)


"""
1.以dp[i][j]作为右下角，合并左一格/左上格/上一格的数值，统计可形成正方形的最大边长
2.hashtable数组初始长度取m or n中更小的数值，因可形成正方形的最大变边长不可能超过原始矩阵的边长
3.每次在dp[i][j]赋值后，顺便统计dp[i][j]的出现次数记录在hashtable，每次统计需要从边长1统计至dp[i][j]的数值为止
例：
matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
dp =
[
  [0,1,1,1],
  [1,1,2,2],
  [0,1,2,3]
]
边长为 1 的正方形有 10 个。    dp[i][j]==1,则边长1的次数+1
边长为 2 的正方形有 4 个。    dp[i][j]==2,则边长1和边长2的次数+1
边长为 3 的正方形有 1 个。    dp[i][j]==3,则边长1和边长2和边长3的次数+1
正方形的总数 = 10 + 4 + 1 = 15.
"""
