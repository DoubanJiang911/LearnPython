class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        dp = [[0]*n]*m  # 初始数组dp
        if obstacleGrid[0][0] or obstacleGrid[m-1][n-1]:
            return 0
        dp[0][0] = 1  # 初始起始位置
        for i in range(0, m):
            for j in range(0, n):
                if obstacleGrid[i][j] == 1:  # 如遇到障碍物的格子则清空数值
                    dp[i][j] = 0
                elif i > 0 and j == 0:  # 边界位置需延用上一个或前一个数值，如上一个或前一个有障碍物，则依旧延用0
                    dp[i][j] = dp[i-1][j]
                elif i == 0 and j > 0:
                    dp[i][j] = dp[i][j-1]
                elif i > 0 and j > 0:
                    dp[i][j] = dp[i-1][j] + dp[i][j-1]
        return dp[-1][-1]
