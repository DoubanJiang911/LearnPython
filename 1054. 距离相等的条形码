class Solution:
    def rearrangeBarcodes(self, barcodes: List[int]) -> List[int]:
        from collections import Counter
        data = []
        for i, j in Counter(barcodes).most_common():
            data += [i] * j
        print(data)  # [2, 2, 2, 3, 3, 3, 1, 4]
        l = len(data)
        ans = [0] * l
        ans[::2] = data[:(l + 1) // 2]
        print(ans)  # [2, 0, 2, 0, 2, 0, 3, 0]
        ans[1::2] = data[(l + 1) // 2:]
        print(ans)  # [2, 3, 2, 3, 2, 1, 3, 4]
        return ans

    """
    1.Counter(barcodes).most_common():将数组barcodes按照重复次数排序
    2.i对应当前记录的数值，j对应记录数值的重复次数
    3.利用str[::2]每隔一个下标位置记录一个数值
    4.data数组记录的前半部分和后半部分依次插入
    """


"""
class Solution:
    def rearrangeBarcodes(self, barcodes: List[int]) -> List[int]:
        nums = list(set(barcodes))  # 利用集合，初始nums数组为去重之后的barcodes
        count = []  # count数组，用于记录nums中的每个数字，在barcodes中出现的次数
        for c in nums:
            count.append(barcodes.count(c))
        ans = []
        """"""
        循环思路：
        1.每次循环首先找到当前重复次数最多的数字（m），在ans中记录m之后，再另外记录一个不等于m的任意数字
        2.每记录一个数字在ans之后，该数字在count中的相应次数-1
        3.当count全部归零后，barcodes的所有数字已全部按照相邻位置值不相同的方式记录在ans中
        """"""
        while sum(count):
            m = max(count)
            n = count.index(m)
            ans.append(nums[n])
            for i in range(len(nums)):
                if i != n and count[i] > 0:
                    ans.append(nums[i])
                    count[i] -= 1
                    break
            count[n] -= 1
        return ans
# 提交结果：超出时间限制，53 / 58 个通过测试用例
"""
